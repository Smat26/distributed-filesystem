

=========
THEORY:
=========
---------------
REPLICATION:
---------------
1. DROPBOX model, where all files are present everywhere.
2. Download file on run-time (on demand)

---------------
DESIGN DECISIONS:
---------------

1. Latest Time Stamp would be considered.
2. Following Dropbox Model for replication.
3. Every message will be broadcasted along with the relevant receivers addresses.
   The relevant receivers will handle the message the rest will just ignore it.
4. No two files will have the same name and path.


=========
PROTOCOLS:
=========

DOWN_FILE : (File ID, Source Node ID, Dest Node ID) : Downloads a specific file from a node
REQ_FILE_TABLE : (Source Node ID, Dest Node ID) : Happens on connection. Receives File Table from the given Node
FORCE_UPDATE : (Source Node ID, Dest Node ID) : Force the given node to do a "REQ_FILE_TABLE"
SEND_FILE_TABLE : (SourceNode ID, Dest Node ID) : Sends the File Table to the given Node.
UPLOAD_FILE : (FILE, Source Node ID, Dest Node ID) : Sends File to the given node.
UPDATE_LOCAL_FILE_TABLE: Update the local files in the local file table.
UPDATE_LOCAL_FILE: Update a single local file in the local file table.
USR_MSG: Each node can broadcast a custom message.



=========
PAGE TABLE:
=========

GLOBAL:
---------------
F_ID:
F_NAME:
TIME_STAMP:
NODE_LIST:
---------------

LOCAL:
---------------
F_ID :
F_NAME :
FS_DWNLD_TIME :
---------------


=========
LOCAL:
=========

Functions:
---------------
Comparing File Table
Monitoring current structure
---------------

Variables:





=========
Parser
=========
1. ls
2. mkdir
3. pwd
4. cd
5. touch
